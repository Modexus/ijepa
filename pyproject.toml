[tool.poetry]
name = "ijepa"
version = "0.1.0"
description = ""
authors = ["Mike Boss"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
pytorch-lightning = "^2.0.9"
datasets = "^2.14.5"
loguru = "^0.7.2"
pillow = "^10.0.1"
pytorch-triton = { url = "https://download.pytorch.org/whl/nightly/pytorch_triton-2.1.0%2B6e4932cda8-cp311-cp311-linux_x86_64.whl" }
torch = { url = "https://download.pytorch.org/whl/nightly/cu121/torch-2.2.0.dev20230912%2Bcu121-cp311-cp311-linux_x86_64.whl" }
torchvision = { url = "https://download.pytorch.org/whl/nightly/cu121/torchvision-0.17.0.dev20230912%2Bcu121-cp311-cp311-linux_x86_64.whl" }
transformers = "^4.33.3"
accelerate = "^0.23.0"

[tool.poetry.group.dev.dependencies]
hydra-core = "^1.3.2"
hydra-zen = "^0.11.0"

[tool.poetry.group.style]
optional = true

[tool.poetry.group.style.dependencies]
ruff = "^0.0.291"
black = "^23.9.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E", # pycodestyle (Error)
    "W", # pycodestyle (Warning)
    "F", # Pyflakes
    "I", # isort 
    "N", # pep8-naming
    # "D",      # pydocstyle
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    # "ANN",    # flake8-annotations
    "ASYNC", # flake8-async
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slot
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "INT",   # flake8-gettext
    "PTH",   # flake8-use-pathlib
    "TD",    # flake8-todo
    "FIX",   # flake8-fixme
    "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks,
    "PL",    # Pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "NPY",   # NumPy-specific-rules
    "AIR",   # Airflow
    "PERF",  # Perflint
    "RUF",   # Ruff-specific rules
]
ignore = [
    "N803",    # invalid-argument-name
    "N806",    # non-lowercase-variable-in-function
    "N812",    # lowercase-imported-as-non-lowercase
    "FBT001",  # boolean-type-hint-positional-argument
    "FBT002",  # boolean-default-value-positional-argument
    "B023",    # function-uses-loop-variable
    "G004",    # logging-f-string
    "PLR0913", # too-many-arguments,
    "PLR0915", # too-many-statements,
    "PLW2901", # redefined-loop-name
    "NPY002",  # numpy-legacy-random
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11
target-version = "py311"
